# name: CI Pipeline

# on:
#   push:
#     branches: [ "main", "develop"]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         python-version: [3.8, 3.9]

#     services:
#       postgres:
#         image: postgres:13
#         env:
#           POSTGRES_DB: task_management
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: 12Facebook@6
#         ports:
#           - 5432:5432
#         options: >-
#           --health-cmd "pg_isready -U postgres"
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#     steps:
#     - uses: actions/checkout@v4

#     - name: Set up Python ${{ matrix.python-version }}
#       uses: actions/setup-python@v3
#       with:
#         python-version: ${{ matrix.python-version }}

#     - name: Install Dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#       working-directory: task_management/backend

#     - name: Wait for Postgres
#       run: |
#         until nc -z localhost 5432; do
#           sleep 1
#         done

#     - name: Create .env file
#       run: |
#         echo "SECRET_KEY=django-insecure-qp^%@n77+ydr-auroxk&zcg&xhj2x4+&3@f+!s3+m9ss*cez3j" >> .env
#         echo "DEBUG=False" >> .env
#         echo "POSTGRES_DB=task_management" >> .env
#         echo "POSTGRES_USER=postgres" >> .env
#         echo "POSTGRES_PASSWORD=12Facebook@6" >> .env
#         echo "POSTGRES_HOST=localhost" >> .env
#         echo "POSTGRES_PORT=5432" >> .env
#       working-directory: task_management/backend

#     - name: Apply Migrations and Run Tests
#       run: |
#         python manage.py migrate
#         python manage.py test
#       working-directory: task_management/backend


name: CI Pipeline

on:
  push:
    branches: [ "main"]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Build and Start Services
      run: docker-compose up -d --build
      working-directory: task_management

    - name: Wait for Database to be Ready
      run: |
        until docker-compose exec -T db pg_isready -U user; do
          echo "Waiting for database to be ready..."
          sleep 5
        done
      working-directory: task_management

    - name: Create .env file
      run: |
        echo "SECRET_KEY=django-insecure-qp^%@n77+ydr-auroxk&zcg&xhj2x4+&3@f+!s3+m9ss*cez3j" >> .env
        echo "DEBUG=False" >> .env
        echo "POSTGRES_DB=task_management" >> .env
        echo "POSTGRES_USER=user" >> .env
        echo "POSTGRES_PASSWORD=password" >> .env
        echo "POSTGRES_HOST=db" >> .env
        echo "POSTGRES_PORT=5432" >> .env
      working-directory: task_management/backend

    - name: Apply Migrations
      run: docker-compose exec web python manage.py migrate
      working-directory: task_management

    - name: Run Tests
      run: docker-compose exec web python manage.py test
      working-directory: task_management

    - name: Shutdown
      if: always()
      run: docker-compose down
      working-directory: task_management

